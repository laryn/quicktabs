<?php
define('QUICKTABS_DELTA_NONE', 999999);

/**
 * Implements hook_config_info().
 */
function quicktabs_config_info() {
  $prefixes['quicktabs.settings'] = array(
    'label' => t('Quicktabs settings'),
    'group' => t('Configuration'),
  );
  $prefixes['quicktabs.quicktab'] = array(
    'name_key' => 'machine_name',
    'label_key' => 'label',
    'group' => t('Quicktabs instances'),
  );
  return $prefixes;
}

/**
 * Implements hook_autoload_info()
 */
function quicktabs_autoload_info() {
  return array(
    'QuickSet' => 'quicktabs.classes.inc',
    'QuickRenderer' => 'quicktabs.classes.inc',
    'QuickContentRenderable' => 'quicktabs.classes.inc',
    'QuickContent' => 'quicktabs.classes.inc',
    'QuickPreRenderedContent' => 'quicktabs.classes.inc',
    'InvalidQuickSetException' => 'quicktabs.classes.inc',
    // Views
    'quicktabs_style_plugin' => 'includes/quicktabs_style_plugin.inc',
    // Plugins
    'QuickAccordion' => 'plugins/QuickAccordion.inc',
    'QuickBlockContent' => 'plugins/QuickBlockContent.inc',
    'QuickCallbackContent' => 'plugins/QuickCallbackContent.inc',
    'QuickNodeContent' => 'plugins/QuickNodeContent.inc',
    'QuickQtabsContent' => 'plugins/QuickQtabsContent.inc',
    'QuickQuicktabs' => 'plugins/QuickQuicktabs.inc',
    'QuickUiTabs' => 'plugins/QuickUiTabs.inc',
    'QuickViewContent' => 'plugins/QuickViewContent.inc',
  );
}

/**
 * Implements hook_menu().
 */
function quicktabs_menu() {
  $items['admin/structure/quicktabs'] = array(
    'title' => 'Quicktabs',
    'description' => 'Create blocks of tabbed content.',
    'page callback' => 'quicktabs_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/list'] = array(
    'title' => 'List quicktabs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/quicktabs/add'] = array(
    'title' => 'Add Quicktabs Instance',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('quicktabs_form', 'add'),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs'] = array(
    'title' => 'Configure quicktab',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('quicktabs_form', 'edit', 4),
    'access arguments' => array('administer quicktabs'),
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/edit'] = array(
    'title' => 'Configure quicktab',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/delete'] = array(
    'title' => 'Delete quicktab',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('quicktabs_block_delete', 4),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quicktabs.admin.inc',
  );
  $items['admin/structure/quicktabs/manage/%quicktabs/clone'] = array(
    'title' => 'Clone quicktab',
    'page callback' => 'quicktabs_clone',
    'page arguments' => array(4),
    'access arguments' => array('administer quicktabs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quicktabs.admin.inc',
  );
  $items['quicktabs/ajax'] = array(
    'page callback' => 'quicktabs_ajax',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function quicktabs_permission() {
  return array(
    'administer quicktabs' => array(
      'title' => t('Administer Quicktabs'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function quicktabs_theme() {
  return array(
    'quicktabs_admin_form_tabs' => array(
      'render element' => 'tabs',
      'file' => 'quicktabs.admin.inc',
    ),
    'qt_ui_tabs' => array(
      'render element' => 'element',
    ),
    'qt_ui_tabs_tabset' => array(
      'render element' => 'tabset',
    ),
    'qt_quicktabs' => array(
      'render element' => 'element',
    ),
    'qt_quicktabs_tabset' => array(
      'render element' => 'tabset',
    ),
    'qt_accordion' => array(
      'render element' => 'element',
    ),
    'quicktabs_tab_access_denied' => array(
      'variables' => array('tab'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function quicktabs_block_info() {
  $blocks = array();
  foreach (quicktabs_load_multiple() as $qt_name => $quicktabs) {
    $blocks[$qt_name]['info'] = $quicktabs->title;
    $blocks[$qt_name]['description'] = t('A Quicktabs block.');
    $blocks[$qt_name]['cache'] = BACKDROP_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function quicktabs_block_view($delta = '') {
  $block = array();
  if ($qt = quicktabs_build_quicktabs($delta)) {
    if (isset($qt['content']) && !empty($qt['content'])) {
      $block['content'] = $qt['content'];
      $block['content']['#contextual_links']['quicktabs'] = array('admin/structure/quicktabs/manage', array($delta));
      $block['subject'] = check_plain($qt['#title']);
    }
  }
  return $block;
}

/**
 * Implements hook_library_info().
 */
function quicktabs_library_info() {
  $module_path = backdrop_get_path('module', 'quicktabs');

  $libraries['jquery.bbq'] = array(
    'title' => 'Enables bookmarkable #hash history.',
    'website' => 'https://github.com/cowboy/jquery-bbq',
    'version' => BACKDROP_VERSION,
    'js' => array(
      $module_path . '/js/jquery.ba-bbq.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  return $libraries;
}

/**
 * Constructs a Quicktabs instance.
 *
 * This function can be called by other modules to programmatically build a
 * quicktabs instance.
 *
 * @param name. The machine name of the Quicktabs instance to build - if a name
 *  is passed that does not correspond to an existing instance, then it is taken
 *  to be a completely custom instance and is built from only the custom tabs
 *  that are passed in.
 *
 * @param settings. An array of settings that will override the options of the Quicktabs
 *  instance from the database, or if no existing instance is being used, these
 *  will override the default settings. Possible keys are 'style', 'hide_empty_tabs',
 *  ajax', 'default_tab', 'renderer', 'title' and 'options'.
 *
 * @param custom_tabs. An array representing custom tab contents, which will be
 *  appended to the Quicktabs instance from the database, or if no existing instance
 *  is being used, the custom tabs will be the entire contents. An example custom_tabs
 *  array would be array(array('title' => 'custom', 'contents' => array('#markup' =>
 *  t('Some markup'), 'weight' => 5));
 *
 * @return A render array that can be used as block content in hook_block_view
 *  (see quicktabs_block_view()), but can also just be added to the page array
 *  during hook_page_alter, or output anywhere else where it's sure to get
 *  passed through backdrop_render().
 */
function quicktabs_build_quicktabs($name, $settings = array(), $custom_tabs = array()) {
  if ($info = quicktabs_load($name)) {
    // Allow other modules to alter the Quicktabs instance before it gets output.
    backdrop_alter('quicktabs', $info);
    $info = (array) $info;
    $settings = array_merge($info, $settings);
    $contents = $settings['tabs'];
    unset($settings['tabs'], $settings['machine_name']);
  }
  elseif (!empty($custom_tabs)) {
    // We'll be creating a custom Quicktabs instance. Make sure we're using an
    // alphanumeric name.
    $name = preg_replace('/[^[a-zA-Z]_]/', '_', $name);
    $contents = array();
  }
  else {
    // If $name doesn't correspond to an existing Quicktabs instance, and there
    // are no custom tabs to render, then we have nothing to do.
    return array();
  }
  $renderer = isset($settings['renderer']) ? $settings['renderer'] : 'quicktabs';
  unset($settings['renderer']);
  $needs_sorting = FALSE;
  $weight = 0;
  foreach ($custom_tabs as &$tab) {
    $needs_sorting = $needs_sorting || isset($tab['weight']);
    $tab += array(
      'type' => 'prerendered',
      'weight' => $weight++,
    );
  }

  $contents = array_merge($custom_tabs, $contents);
  $weight = array();
  foreach ($contents as $key => $item) {
    // Load the plugin responsible for rendering this item, if it is not a
    // prerendered tab.
    if ($item['type'] != 'prerendered') {
      plugin_manager_load_class('quicktabs', 'contents', $item['type'], 'handler');
    }

    // Add item's weight to our weights array so that we can then sort by weight.
    $weight[$key] = $item['weight'];

    // Make sure we're not going to try to load the same QuickSet instance
    // inside itself.
    if ($item['type'] == 'qtabs' && $item['machine_name'] == $name) {
      unset($contents[$key]);
      unset($weight[$key]);
    }
  }
  // Only sort by weight if the tabs haven't already been sorted by some other
  // mechanism, e.g. Views in the case of the Views style plugin and there was
  // a weight given for one of the tabs.
  if ($needs_sorting && (!isset($settings['sorted']) || !$settings['sorted'])) {
    array_multisort($weight, SORT_ASC, $contents);
  }
  else {
    unset($settings['sorted']);
  }
  if ($qt = quickset_renderer_factory($name, $contents, $renderer, $settings)) {
    $renderable_qt = array('#title' => $qt->getTitle(), 'content' => $qt->render());
    return $renderable_qt;
  }
  return array();
}

/**
 * Ajax callback for tab content.
 *
 * @param name The machine name of the quicktabs instance.
 *
 * @param index The tab index we're returning content for.
 *
 * @param type The type of content we're rendering.
 *
 * @return a json-formatted ajax commands array.
 */
function quicktabs_ajax($name, $index, $type) {

  $args = func_get_args();
  $variable_args = array_slice($args, 3);
  // Add the Quicktabs machine name to the args we pass to the content renderer
  array_unshift($variable_args, $name);

  $data = QuickSet::ajaxRenderContent($type, $variable_args);

  $commands = array();
  $tabpage_id = 'quicktabs-tabpage-'. $name .'-' . $index;
  $commands[] = ajax_command_append('#quicktabs-container-'. $name, '<div id="' . $tabpage_id .'" class="quicktabs-tabpage">'. $data .'</div>');
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Load the quicktabs data for a particular instance.
 */
function quicktabs_load($name) {
  $config = config('quicktabs.quicktab.' . $name);
  return (!$config->isNew()) ? (object) $config->getData() : NULL;
}

/**
 * Load the quicktabs data.
 */
function quicktabs_load_multiple() {
  $config_names = config_get_names_with_prefix('quicktabs.quicktab.');
  foreach ($config_names as $config_name) {
    $config = config($config_name);
    $qts[$config->get('machine_name')] = (object) $config->getData();
  }
  return $qts;
}

/**
 * Creates a new quicktab instance.
 */
function quicktabs_save($quicktab) {
  module_invoke_all('quicktabs_presave', $quicktab);

  $config = config('quicktabs.quicktab.' . $quicktab->machine_name);
  $is_new = $config->isNew();
  $config->setData((array) $quicktab);
  $config->save();

  if (!$is_new) {
    quicktabs_i18n_update_strings(array($quicktab->machine_name));
  }
  else {
    quicktabs_i18n_update_strings(array($quicktab->machine_name));
    module_invoke_all('quicktabs_insert', $quicktab);
  }
  module_invoke_all('quicktabs_save', $quicktab);
  return $quicktab;
}

/**
 * Updates an existing quicktab instance.
 */
function quicktabs_update($quicktab) {
  quicktabs_save($quicktab);
  module_invoke_all('quicktabs_update', $quicktab);
  return $quicktab;
}

/**
 * Deletes a quicktab instance.
 */
function quicktabs_delete($machine_name) {
  $config = config('quicktabs.quicktab.' . $machine_name);
  $config->delete();

  module_invoke_all('quicktabs_delete', $machine_name);
}

/**
* Implements hook_i18n_string_info()
*/
function quicktabs_i18n_string_info() {
  $groups['quicktabs'] = array(
    'title' => t('Quicktabs'),
    'description' => t('Vocabulary titles and term names for localizable quicktabs.'),
    'format' => FALSE, // This group doesn't have strings with format
    'list' => TRUE, // This group can list all strings
  );
  return $groups;
}

function quicktabs_translate($name, $string, $langcode = NULL, $textgroup = 'quicktabs') {
  return function_exists('i18n_string') ? i18n_string($textgroup . ':' . $name, $string, array('langcode' => $langcode)) : $string;
}

/**
 * Update translatable strings.
 */
function quicktabs_i18n_update_strings($names = array()) {
  if (!function_exists('i18n_string_update')) return;
  $qts = quicktabs_load_multiple($names);
  foreach ($qts as $name => $quicktabs) {
    i18n_string_update("quicktabs:title:$name", $quicktabs->title);
    foreach ($quicktabs->tabs as $tabkey => $tab) {
      i18n_string_update("quicktabs:tab:{$name}:title:" . md5($tab['title']), $tab['title']);
    }
  }
}

/**
 * Implements hook_i18n_string_refresh().
 *
 * Refresh translations for all user-generated strings managed by quicktabs.
 * This will load all strings inputted via the quicktabs user interface and
 * register them (and their translations, if there are any) with the
 * i18n_strings system.
 */
function quicktabs_i18n_string_refresh($group) {
  if ($group === 'quicktabs') {
    quicktabs_i18n_update_strings();
  }
  return TRUE;
}

/**
 * Implements hook_plugin_manager_plugin_type().
 */
function quicktabs_plugin_manager_plugin_type() {
  return array(
    // Renderer plugins control the display of sets of items, e.g. as tabs.
    'renderers' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    // Content plugins control the display of individual items.
    'contents' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    )
  );
}

/**
 * Implements hook_quicktabs_renderers().
 */
function quicktabs_quicktabs_renderers() {
  $info = array();
  $path = backdrop_get_path('module', 'quicktabs') . '/plugins';
  $info['quicktabs'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickQuicktabs.inc',
      'class' => 'QuickQuicktabs',
    ),
  );
  $info['ui_tabs'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickUiTabs.inc',
      'class' => 'QuickUiTabs',
    ),
  );
  $info['accordion'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickAccordion.inc',
      'class' => 'QuickAccordion',
    ),
  );
  return $info;
}

/**
 * Implements hook_quicktabs_contents().
 */
function quicktabs_quicktabs_contents() {
  $info = array();
  $path = backdrop_get_path('module', 'quicktabs') . '/plugins';
  $info['node'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickNodeContent.inc',
      'class' => 'QuickNodeContent',
    ),
  );
  $info['block'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickBlockContent.inc',
      'class' => 'QuickBlockContent',
    ),
    'dependencies' => array('block'),
  );
  $info['view'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickViewContent.inc',
      'class' => 'QuickViewContent',
    ),
    'dependencies' => array('views'),
  );
  $info['qtabs'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickQtabsContent.inc',
      'class' => 'QuickQtabsContent',
    ),
  );
  $info['callback'] = array(
    'path' => $path,
    'handler' => array(
      'file' => 'QuickCallbackContent.inc',
      'class' => 'QuickCallbackContent',
    ),
  );
  return $info;
}

/**
 * Returns a renderered QuickSet.
 */
function quickset_renderer_factory($name, $contents, $renderer, $settings) {
  return QuickSet::QuickSetRendererFactory($name, $contents, $renderer, $settings);
}

/**
 * Returns an object that implements the QuickContent interface.
 */
function quick_content_factory($name, $item) {
  return QuickContent::factory($name, $item);
}

/**
 * Determine if the machine name is in use.
 */
function quicktabs_machine_name_exists($machine_name) {
  $config = config('quicktabs.quicktab.' . $machine_name);
  return !$config->isNew();
}

/**
 * Implementation of hook_views_api().
 */
function quicktabs_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Theme function to display the access denied tab.
 *
 * @ingroup themeable
 */
function theme_quicktabs_tab_access_denied($variables) {
  return t('You are not authorized to access this content.');
}


/**
 * Fetch the necessary CSS files for the tab style.
 */
function quicktabs_get_css($style) {
  if ($style == 'default') {
    // Get the default style.
    $style = config_get('quicktabs.settings', 'tabstyle');
  }
  if ($style == 'nostyle') return array();
  $style_css = _quicktabs_get_style_css($style);
  return $style_css;
}

/**
 * Helper function to get the css file for given style.
 */
function _quicktabs_get_style_css($style) {
  $tabstyles = &backdrop_static(__FUNCTION__);
  if (empty($tabstyles)) {
    $cid = 'quicktabs_tabstyles';
    $cache = cache_get($cid);
    if (!$cache) {
      $tabstyles = module_invoke_all('quicktabs_tabstyles');
      cache_set($cid, $tabstyles);
    }
    else {
      $tabstyles = $cache->data;
    }
  }
  if ($css_file = array_search($style, $tabstyles)) {
    return array('data' => $css_file);
  }
  return array();
}

/**
 * Theme function to output tablinks for jQuery UI style tabs.
 *
 * @ingroup themeable
 */
function theme_qt_ui_tabs_tabset($vars) {

  $output = '<ul>';
  foreach ($vars['tabset']['tablinks'] as $i => $tab) {
    if (is_array($tab)) {
      $output .= '<li>'. backdrop_render($tab) .'</li>';
    }
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Theme function to output content for jQuery UI style tabs.
 *
 * @ingroup themeable
 */
function theme_qt_ui_tabs($variables) {
  $element = $variables['element'];
  $output = '<div '. backdrop_attributes($element['#options']['attributes']) .'>';
  $output .= backdrop_render($element['tabs']);

  if (isset($element['active'])) {
    $output .= backdrop_render($element['active']);
  }
  else {
    foreach ($element['divs'] as $div) {
      $output .= backdrop_render($div);
    }
  }

  $output .= '</div>';
  return $output;
}

/**
 * Theme function to output tablinks for classic Quicktabs style tabs.
 *
 * @ingroup themeable
 */
function theme_qt_quicktabs_tabset($vars) {
  $variables = array(
    'attributes' => array(
      'class' => 'quicktabs-tabs quicktabs-style-' . $vars['tabset']['#options']['style'],
    ),
    'items' => array(),
  );
  foreach (element_children($vars['tabset']['tablinks']) as $key) {
    $item = array();
    if (is_array($vars['tabset']['tablinks'][$key])) {
      $tab = $vars['tabset']['tablinks'][$key];
      if ($key == $vars['tabset']['#options']['active']) {
        $item['class'] = array('active');
      }
      $item['class'][] = backdrop_html_class($tab['#title']);
      $item['data'] = backdrop_render($tab);
      $variables['items'][] = $item;
    }
  }
  return theme('item_list', $variables);
}

/**
 * Theme function to output content for classic Quicktabs style tabs.
 *
 * @ingroup themeable
 */
function theme_qt_quicktabs($variables) {
  $element = $variables['element'];
  $output = '<div '. backdrop_attributes($element['#options']['attributes']) .'>';
  $output .= backdrop_render($element['tabs']);

  $output .= backdrop_render($element['container']);

  $output .= '</div>';
  return $output;
}


/**
 * Theme function to output markup for the accordion style.
 *
 * @ingroup themeable
 */
function theme_qt_accordion($variables) {
  $element = $variables['element'];
  $output = '<div '. backdrop_attributes($element['#options']['attributes']) .'>';
  foreach ($element['divs'] as $div) {
    $output .= backdrop_render($div);
  }

  $output .= '</div>';
  return $output;
}
